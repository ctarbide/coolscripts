
Limit the responsibilities of Makefile and delegate the heavy work back to
sh/nofake as soon as possible.

To generate/update Makefile, simply do:

    nofake Makefile.nw | sh

<<sources>>=
Makefile.nw create-config.nw nofake-exec.nw
repl.nw git-last-modified.nw nwsplit.nw
@

<<*>>=
#!/bin/sh
set -eu
SH=${SH:-sh -eu}; export SH
nofake --error -Rgenerate Makefile.nw | ${SH} >Makefile
@

<<generate>>=
#!/bin/sh
set -eu
SH=${SH:-sh -eu}; export SH
set_sources=`nofake --error -Rsources Makefile.nw | normalize-args.sh |
    perl -lpe'$_=qq{set -- \042\\\$\@\042 ${_};}'`
eval "set --; ${set_sources}"
nofake --error -R'generate Makefile' "$@" | ${SH}
@

<<generate Makefile>>=
#!/bin/sh
set -eu
SH=${SH:-sh -eu}; export SH
printf -- '\n# automatically generated from Makefile.nw\n\n'
set_sources=`nofake --error -Rsources Makefile.nw | normalize-args.sh |
    perl -lpe'$_=qq{set -- \042\\\$\@\042 ${_};}'`
eval "set --; ${set_sources}"
printf -- 'SH = %s\n\nSOURCES = \\\n' "${SH}"
<<indent "$@">>
set --
<<targets>>
printf -- '\nTARGETS = \\\n'
<<indent "$@">>
printf -- '\nall: $(TARGETS)\n\n'
for target; do
    printf '%s: \\\n' "${target}"
    (
        eval "set --; ${set_sources}"
        set_deps=`nofake --error -R"${target} deps" "$@" | normalize-args.sh | perl -lpe'$_=qq{set -- \042\\\$\@\042 ${_};}'`
        eval "set --; ${set_deps}"
        <<indent "$@">>
        printf -- '\t@nofake --error -R'"'"'build '"${target}'"' $(SOURCES) | $(SH)\n\n'
    )
done
printf -- 'clean:\n\t-rm -f $(TARGETS)\n\n'
@

<<indent "$@">>=
perl -le'
    sub backslash(){ scalar(@ARGV) ? q{ \\} : q{} }
    while (my @a = splice(@ARGV, 0, 3)) {
        print(q{    }, join(q{ }, @a), backslash);
    }' -- "$@"
@
