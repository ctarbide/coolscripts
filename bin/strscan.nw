
Copyright (c) 2024 by C. Tarbide. You may do as you please with
this code as long as you do not remove this copyright notice or
hold me liable for its use.

'end' is exclusive, i.e., len = end - beg

<<structs>>=
struct strscan {
    char *beg, *end;
    int pos, fail;
};
@

<<definitions>>=
#define STRSCAN_PTR(ctx) ((ctx)->beg + (ctx)->pos)
#define STRSCAN_LEN(ctx) ((ctx)->end - STRSCAN_PTR(ctx))
@

<<protos>>=
void
strscan(struct strscan *ctx, char *s, size_t len);
@

<<impl>>=
void
strscan(struct strscan *ctx, char *s, size_t len)
{
    ctx->beg = s;
    ctx->end = s + len;
    ctx->pos = 0;
    ctx->fail = 0;
}
@

<<protos>>=
void rtrim(struct strscan *ctx);
@

<<impl>>=
void rtrim(struct strscan *ctx)
{
    char *b = ctx->beg + ctx->pos;
    char *e = ctx->end - 1;
    if (ctx->fail) return;
    while (e >= b && (*e == ' ' || *e == '\t')) {
        e--;
    }
    ctx->end = e + 1;
}
@

<<protos>>=
int
startswith2(struct strscan *ctx, int x, int y);
@

<<impl>>=
int
startswith2(struct strscan *ctx, int x, int y)
{
    char *b = ctx->beg + ctx->pos;
    size_t l = ctx->end - b;
    if (ctx->fail) return 0;
    if (l < 2) {
        return 0;
    }
    if (b[0] == x && b[1] == y) {
        ctx->pos += 2;
        return 1;
    }
    return 0;
}
@

<<protos>>=
int
endswith3(struct strscan *ctx, int x, int y, int z);
@

<<impl>>=
int
endswith3(struct strscan *ctx, int x, int y, int z)
{
    char *e = ctx->end;
    size_t l = e - (ctx->beg + ctx->pos);
    if (ctx->fail) return 0;
    if (l < 3) {
        return 0;
    }
    if (e[-3] == x && e[-2] == y && e[-1] == z) {
        ctx->end = e - 3;
        return 1;
    }
    return 0;
}
@

<<protos>>=
int
exact1(struct strscan *ctx, int x);
@

<<impl>>=
int
exact1(struct strscan *ctx, int x)
{
    char *b = ctx->beg + ctx->pos;
    size_t l = ctx->end - b;
    if (ctx->fail) return 0;
    if (l != 1) {
        return 0;
    }
    if (b[0] == x) {
        ctx->pos++;
        return 1;
    }
    return 0;
}
@

<<protos>>=
int
hasatleast(struct strscan *ctx, size_t len);
@

<<impl>>=
int
hasatleast(struct strscan *ctx, size_t len)
{
    if (ctx->fail) return 0;
    if ((ctx->end - (ctx->beg + ctx->pos)) >= (ssize_t)len) {
        return 1;
    }
    return 0;
}
@
