
<<sh preamble>>=
#!/bin/sh
set -eu
@

<<seed required modules>>=
-MConfig -MTime::HiRes=time,clock -MScalar::Util=refaddr
@

<<sub sysrng64bit>>=
open(RNG,q{<},q{/dev/urandom}) or die;
sub sysrng64bit () {
    read(RNG, $_, 8);
    die unless length == 8;
    unpack(q{H*}, $_);
}
@

<<sub seed>>=
my $seed_const = sprintf(qq{[%s]\t%s:%s:%s}, $Config{cf_time}, getppid, $$, refaddr(\%ENV));
my $seed_ccnt = 0;
my $n = 0;
<<sub sysrng64bit>>
sub seed () {
    my $a = clock;
    my $b = $a + 1e-4;
    while (clock < $b) { $seed_ccnt++; }
    sprintf(qq{%s\t%s\t%.9f\t%.9f\t%s\t%s}, $seed_const, ++$n, time, $a, $seed_ccnt, sysrng64bit)
}
@

<<seed.sh>>=
<<sh preamble>>
exec perl <<seed required modules>> -le'
    <<sub seed>>
    if ($ARGV[0] =~ /^(\d+)$/) {
        my $times = $1;
        die "Error, too low entropy." if $times < 64;
        while ($times--) { print(seed) }
    } else {
        while (1) { print(seed) }
    }
' -- "$@"
@

<<cstrng.sh>>=
<<sh preamble>>
exec perl <<seed required modules>> -MDigest::SHA=sha512 -e'
    <<sub seed>>
    while (1) {
        my $s = sha512(join(qq{\n}, map {seed} 1..64));
        my $k = length($s).qq{:${s},};
        for my $n (1..1048576) {
            print(sha512(qq{${k}${n}}));
        }
    }
'
@

<<targets>>=
set -- "$@" seed.sh
set -- "$@" cstrng.sh
@

<<seed.sh deps>>=
cstrng.nw
@

<<build seed.sh>>=
CHMOD='chmod 0555' nofake.sh --error -Rseed.sh -oseed.sh <<seed.sh deps>>
@

<<cstrng.sh deps>>=
cstrng.nw
@

<<build cstrng.sh>>=
CHMOD='chmod 0555' nofake.sh --error -Rcstrng.sh -ocstrng.sh <<cstrng.sh deps>>
@
