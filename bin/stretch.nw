
<<test vector>>=
<<sh preamble>>
<<function tohex>>
echo -n hi | ./stretch.sh -l1 -s1 -t1 | tohex
echo 'ef42f096044ad23275b812bc7f3695f062dd46537be4370077c1d0d9730eb5cc'
echo -n hi | ./stretch.sh -l16 -s16 -t16 | tohex
echo '958ff1f81153dcab6a0988e47d09d3197d8244d5d102db2e331aae19c9fa710d'
echo '"stretch.sh -l16 -s16 -t16" is the default'
echo -n hi | ./stretch.sh | tohex
echo '958ff1f81153dcab6a0988e47d09d3197d8244d5d102db2e331aae19c9fa710d'
@

<<test vector -- long>>=
echo -n hi | ./stretch.sh -l64 -s16 -t16
echo '795dac13d15f45bc667bfe4ccd431a0753034ab212d45ec78a5b643d779c41a4'
@

The key is always read from standard input, it is the caller responsibility to
properly handle the key (e.g. use of salt, deciding safe levels of entropy and
complexity etc).

<<generate master key from standar input>>=
masterkey=`temporary_file`
tmpfiles="${tmpfiles:+${tmpfiles} }'${masterkey}'"
"${thisdir}/csprng.sh" | "${thisdir}/ddfb.sh" bs=32 count=1 skip=0 > "${masterkey}"
@

<<default options>>=
lanes=16
space=16
time=16
@

<<process options>>=
while [ $# -gt 0 ]; do
    case "${1}" in
        -l|--lanes) lanes=${2}; shift ;;
        --lanes=*) lanes=${1#*=} ;;
        -l*) lanes=${1#??} ;;

        -s|--space) space=${2}; shift ;;
        --space=*) space=${1#*=} ;;
        -s*) space=${1#??} ;;

        -t|--time) time=${2}; shift ;;
        --time=*) time=${1#*=} ;;
        -t*) time=${1#??} ;;

        *)
            echo "${0##*/}: Unrecognized option '${1}'." 1>&2
            exit 1
            ;;
    esac
    shift
done
@

<<stretch.sh>>=
<<sh preamble>>
<<function die>>
<<function temporary_file>>
<<function sha256>>
<<function bytes_to_bits>>

thispath=`perl -MCwd=realpath -le'print(realpath(\$ARGV[0]))' -- "${0}"`
thisdir=${thispath%/*}

<<default options>>
<<process options>>

LC_ALL=C
export LC_ALL

<<generate master key from standar input>>
<<first key derivation>>
<<second key derivation>>
<<space work>>
<<verify temporary files>>
<<time work>>
<<compute final result>>
@

<<first key derivation>>=
subkey1=`temporary_file`
tmpfiles="${tmpfiles:+${tmpfiles} }'${subkey1}'"

subkey2=`temporary_file`
tmpfiles="${tmpfiles:+${tmpfiles} }'${subkey2}'"

"${thisdir}/csprng.sh" < "${masterkey}" | "${thisdir}/ddfb.sh" bs=32 count=1 skip=0 > "${subkey1}"
"${thisdir}/csprng.sh" < "${masterkey}" | "${thisdir}/ddfb.sh" bs=32 count=1 skip=1 > "${subkey2}"
@

<<second key derivation>>=
for i in `seq 1 "${lanes}"`; do
    rngkey=`temporary_file`
    tmpfiles="${tmpfiles:+${tmpfiles} }'${rngkey}'"
    eval 'rngkey'"${i}='${rngkey}'"
    shufflekey=`temporary_file`
    tmpfiles="${tmpfiles:+${tmpfiles} }'${shufflekey}'"
    eval 'shufflekey'"${i}='${shufflekey}'"
    "${thisdir}/csprng.sh" < "${subkey1}" | "${thisdir}/ddfb.sh" bs=32 count=1 skip="${i}" > "${rngkey}"
    "${thisdir}/csprng.sh" < "${subkey2}" | "${thisdir}/ddfb.sh" bs=32 count=1 skip="${i}" > "${shufflekey}"
done
@

<<space work>>=
spaces=
for i in `seq 1 "${lanes}"`; do
    eval 'rngkey=${rngkey'"${i}"'}'
    eval 'shufflekey=${shufflekey'"${i}"'}'

    spacearea=`temporary_file`
    tmpfiles="${tmpfiles:+${tmpfiles} }'${spacearea}'"

    spaceareatmp=`temporary_file`
    tmpfiles="${tmpfiles:+${tmpfiles} }'${spaceareatmp}'"

    spaces=${spaces:+${spaces} }"'${spacearea}'"

    eval 'spacearea'"${i}='${spacearea}'"
    eval 'spaceareatmp'"${i}='${spaceareatmp}'"

    "${thisdir}/csprng.sh" < "${rngkey}" | "${thisdir}/ddfb.sh" bs=128 count="${space}" | bytes_to_bits | "${thisdir}/random-prefix.sh" -k "${shufflekey}" >> "${spacearea}"
done
@

number of expected temporary files:

    - three per derived keys: a master key and two sub keys

    - four per lane: rng key, shuffle key and two space areas

<<verify temporary files>>=
expected=$((3 + lanes * 4))
eval "set -- ${tmpfiles}"
if [ x"${#}" != x"${expected}" ]; then
    die 1 "Error, unexpected number of temporary files, try again."
fi
@

<<time work>>=
for i in `seq 1 "${lanes}"`; do
    eval 'spacearea=${spacearea'"${i}"'}'
    eval 'spaceareatmp=${spaceareatmp'"${i}"'}'
    eval 'shufflekey=${shufflekey'"${i}"'}'
    for j in `seq 1 "${time}"`; do
	sha256 < "${spacearea}" > "${shufflekey}"
        LC_ALL=C sort < "${spacearea}" | perl -lpe's,^.*?\t.*?\t,,' | "${thisdir}/random-prefix.sh" -k "${shufflekey}" > "${spaceareatmp}"
        cat < "${spaceareatmp}" > "${spacearea}"
    done
done
@

<<compute final result>>=
eval "set -- ${spaces}"
sha256 "$@"
@

<<sh preamble>>=
#!/bin/sh
set -eu
@

<<function sha256>>=
sha256(){ cat "$@" | sha256sum | perl -ane'print(pack(q{H*},$F[0]))'; }
@

<<function bytes_to_bits>>=
bytes_to_bits=bytes-to-bits.sh
if command -v bytes-to-bits >/dev/null 2>&1; then
    bytes_to_bits=bytes-to-bits
fi
bytes_to_bits(){ "${bytes_to_bits}" "$@"; }
@

<<function die>>=
die(){ ev=$1; shift; for msg in "$@"; do echo "${msg}"; done; exit "${ev}"; }
@

<<function tohex>>=
tohex(){ cat "$@" | perl -l -0777 -e'print(unpack(q{H*},scalar(<>)))'; }
@

<<*>>=
<<sh preamble>>
CHMOD='chmod 0555' nofake.sh -Rstretch.sh -ostretch.sh stretch.nw temporary-files-shell.nw
@
