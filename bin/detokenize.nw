
nofake -RWIP detokenize.nw | sh

<<WIP>>=
#!/bin/sh
set -eu
make tokenize detokenize
./tokenize nofake.nw | ./detokenize 2>/dev/null | sha256sum
sha256sum nofake.nw
@

'nofake detokenize.nw' for build instructions

<<Define CONVERT_CRLF_TO_LF>>=
#define CONVERT_CRLF_TO_LF 1
@

<<chop nl>>=
if (line_length < 3) { /* CATEGORY RESERVED [ DATA ] LF */
    fprintf(stderr, "Exhaustion %s:%d.", __FILE__, __LINE__);
    exit(1);
}
line_length--;
@

<<Process Line - vars>>=
size_t line_length;
struct strscan ctx[1];
char *b;
@

<<set strscan context>>=
strscan(ctx, line_start, line_length);
@

<<Variables local to [[main]]>>=
long input_line_number = 0;
@

<<Process Line>>=
<<Process Line - vars>>
assert(line_end >= line_start);
line_length = (size_t)(line_end - line_start);
<<chop nl>>
<<set strscan context>>
b = ctx->beg;
switch (*b) {
    case '0':
        ctx->pos += 2;
        fprintf(stderr, "file name: [");
        fwrite(STRSCAN_PTR(ctx), 1, STRSCAN_LEN(ctx), stderr);
        fprintf(stderr, "]\n");
        input_line_number = 1;
        break;
    case '1':
        putc('\n', stdout);
        ctx->pos += 2;
        fprintf(stderr, "done with line ");
        fwrite(STRSCAN_PTR(ctx), 1, STRSCAN_LEN(ctx), stderr);
        fprintf(stderr, " (%ld)\n", input_line_number);
        input_line_number++;
        break;
    case '2': /* EOF */
        break;
    case '3': /* isalpha(c) */
        ctx->pos += 2;
        fwrite(STRSCAN_PTR(ctx), 1, STRSCAN_LEN(ctx), stdout);
        break;
    case '4': /* isdigit(c) */
        ctx->pos += 2;
        fwrite(STRSCAN_PTR(ctx), 1, STRSCAN_LEN(ctx), stdout);
        break;
    case '5': /* c == ' ' || c == '\t' */
        ctx->pos += 2;
        fwrite(STRSCAN_PTR(ctx), 1, STRSCAN_LEN(ctx), stdout);
        break;
    case '6': /* ispunct(c) */
        putc(b[2], stdout);
        break;
    case '7': { /* c <= 127 */
            ctx->pos += 2;
            if (STRSCAN_LEN(ctx) != 2) {
                fprintf(stderr, "Exhaustion %s:%d.", __FILE__, __LINE__);
                exit(1);
            }
            /* 0x00..0xFF -> 0y@@..0yOO */
            /* 0xBF = ~0x40 & 0xFF */
            c = (b[2] & 0xBF) << 4 | (b[3] & 0xBF);
            putc(c, stdout);
        }
        break;
    default:
        fprintf(stderr, "Exhaustion %s:%d.", __FILE__, __LINE__);
        exit(1);
        break;
}
@

<<The main program>>=
int main(int argc, char **argv)
{
    <<Variables local to [[main]]>>
    <<Local variables initialization>>
    <<Set up option selection>>
    <<Process all the files>>
    <<Exit status>>
}
@

<<detokenize.c>>=
<<C Standards>>
<<Header files to include>>
<<Definitions>>
<<Types>>
<<Protos>>
<<Global variables>>
<<Auxiliary Functions>>
<<The main program>>
@

<<C Standards>>=
#ifndef _BSD_SOURCE
#define _BSD_SOURCE
#endif
#ifndef _ISOC99_SOURCE
#define _ISOC99_SOURCE
#endif
#ifndef _XOPEN_SOURCE
#define _XOPEN_SOURCE 600
#endif
#ifndef _POSIX_C_SOURCE
#define _POSIX_C_SOURCE 200112L
#endif
@

<<Header files to include>>=
#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdint.h>
#include <inttypes.h>
#include <string.h>
#include <assert.h>
@

stdio.h BUFSIZ chosen for efficiency, BUF_SIZE also dictates the maximum line
length

<<Define BUF_SIZE>>=
#if BUFSIZ >= 512
#define BUF_SIZE            BUFSIZ
#else
#define BUF_SIZE            512
#endif
@

<<Definitions>>=
#define OK                  0   /* status code for successful run */
#define CANNOT_OPEN_FILE    1   /* status code for file access error */
#define LINE_TOO_LONG       2   /* line longer than BUF_SIZE - 1 */
#define READ_ONLY           0   /* read access code for system open */
<<Define BUF_SIZE>>
<<Define CONVERT_CRLF_TO_LF>>
@

<<Global variables>>=
int status = OK;        /* exit status of command, initially OK */
char *prog_name;        /* who we are */
long tot_line_count;    /* total number of lines */
@

<<Update grand totals>>=
tot_line_count += line_count;
@

<<Close file>>=
close(fd);
@

<<Scan buffer>>=
while (got_eof == 0) {
    <<Fill [[buffer]] if it is empty; [[break]] at end of file>>
    c = *line_end++;
    if (c == '\n') {
        /* lf or cr-lf */
#if CONVERT_CRLF_TO_LF
        line_end -= got_cr;
        *(line_end - 1) = '\n';
#endif
        line_count++;
        {
            <<Process Line>>
        }
#if CONVERT_CRLF_TO_LF
        line_end += got_cr;
#endif
        line_start = line_end;
        got_cr = 0;
    } else if (got_cr) {
        /* cr, convert to lf and repeat */
        got_cr = 0;
        line_end -= 2;
        *line_end = '\n';
    } else {
        got_cr = c == '\r';
    }
}
@

<<Scan file>>=
line_start = line_end = buffer;
nc = read(fd, line_end, BUF_SIZE);
if (nc > 0) {
    buf_end = buffer + nc;
    <<Scan buffer>>
}
@

<<Initialize pointers and counters>>=
line_start = line_end = buffer;
line_count = 0;
@

<<If a file is given, try to open [[*(++argv)]]; [[continue]] if unsuccessful>>=
if (file_count > 0) {
    file_name = *(++argv);
    if (strcmp(file_name, "-") == 0) {
        fd = 0; /* stdin */
    } else if ((fd = open(file_name, READ_ONLY)) < 0) {
        fprintf(stderr,
            "%s: cannot open file %s\n",
            prog_name, file_name);
        status |= CANNOT_OPEN_FILE;
        file_count--;
        continue;
    }
} else {
    fd = 0; /* stdin */
    file_name = "-";
}
@

<<Process all the files>>=
argc--;
do {
    <<If a file is given, try to open [[*(++argv)]]; [[continue]] if unsuccessful>>
    <<Initialize pointers and counters>>
    <<Scan file>>
    <<Close file>>
    <<Update grand totals>>
} while (--argc > 0);
@

<<Set up option selection>>=
file_count = argc - 1;
@

<<Variables local to [[main]]>>=
int file_count;         /* how many files there are */
char *file_name;        /* Used to differentiate between *argv and '-' */
int fd;                 /* file descriptor */
char buffer[BUF_SIZE];  /* we read the input into this array */
char *line_start;       /* where in the buffer the current line starts */
char *line_end;         /* first unprocessed character in buffer */
char *buf_end;          /* the first unused position in buffer */
int c;                  /* current char */
ssize_t nc;             /* # of chars just read */
long line_count;        /* # of words, lines, and chars so far */
int got_eof = 0;        /* read got EOF */
int got_cr = 0;         /* previous char was '\r' */
@

<<Local variables initialization>>=
prog_name = argv[0];
@

<<Exit status>>=
exit(status);
return 0;
@

<<Definitions>>=
<<definitions>>
<<Types>>=
<<structs>>
<<Auxiliary Functions>>=
<<impl>>
<<Protos>>=
<<protos>>
@

nofake detokenize.nw | sh -eux

<<*>>=
#!/bin/sh
set -eu
<<build detokenize.c>>
<<build detokenize>>
@

[[targets]] are used by automatic Makefile generation, see [[Makefile.nw]] for
details.

<<targets>>=
set -- "$@" detokenize--imports.nw
set -- "$@" detokenize.c
set -- "$@" detokenize
@

<<detokenize--imports.nw deps>>=
detokenize.nw repl.nw
@

<<build detokenize--imports.nw>>=
:>detokenize--imports.nw
set --
set "$@" 'Fill [[buffer]] if it is empty; [[break]] at end of file'
nofake-export-chunks.sh "$@" <repl.nw >>detokenize--imports.nw
@

<<detokenize.c deps>>=
detokenize--imports.nw detokenize.nw strscan.nw
@

<<detokenize deps>>=
<<detokenize.c deps>> detokenize.c
@

<<build detokenize.c>>=
CHMOD='chmod 0444' nofake.sh --error -L -Rdetokenize.c -odetokenize.c <<detokenize.c deps>>
@

<<build detokenize - DEBUG>>=
gcc -O0 -g -Wall -ansi -pedantic -o detokenize detokenize.c
@

<<build detokenize - STANDARD>>=
gcc -O2 -Wall -ansi -pedantic -o detokenize detokenize.c
@

<<set build PEDANTIC>>=
set -- "$@" -ansi -pedantic
set -- "$@" -Wall -Wextra -Wdeclaration-after-statement
set -- "$@" -Wstrict-prototypes -Wmissing-prototypes
set -- "$@" -Wredundant-decls
set -- "$@" -Wshadow
set -- "$@" -Wpointer-arith
set -- "$@" -Wconversion
set -- "$@" -Wno-unused-parameter
set -- "$@" -Werror -fmax-errors=3
@

<<build detokenize - PEDANTIC>>=
set --
<<set build PEDANTIC>>
gcc -O2 "$@" -o detokenize detokenize.c
@

<<build detokenize>>=
#!/bin/sh
set -eu
#@<<build detokenize - DEBUG>>
#@<<build detokenize - STANDARD>>
<<build detokenize - PEDANTIC>>
@

<<tests.sh>>=
#!/bin/sh
set -eux
make detokenize
@
