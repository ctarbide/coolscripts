
Copyright (c) 2024 by C. Tarbide. You may do as you please with
this code as long as you do not remove this copyright notice or
hold me liable for its use.

'end' is exclusive, i.e., len = end - beg

<<structs>>=
struct token_file_name {
    char *filename;
};
struct token_line_number {
    struct token_file_name *file_name;
    int line_number;
};
struct token {
    struct token_line_number *line_number;
    char *image;
    char cat;
    union {
        char punct;     /* cat 5 */
        char hilo[2];   /* cat 6 */
    } value;
};
struct tkscan {
    struct token *beg, *end;
    int pos, fail;
};
@

<<definitions>>=
#define TKSCAN_PTR(ctx) ((ctx)->beg + (ctx)->pos)
#define TKSCAN_LEN(ctx) ((ctx)->end - TKSCAN_PTR(ctx))
@

<<protos>>=
void
tkscan(struct tkscan *ctx, struct token *s, size_t len);
@

<<impl>>=
void
tkscan(struct tkscan *ctx, struct token *s, size_t len)
{
    ctx->beg = s;
    ctx->end = s + len;
    ctx->pos = 0;
    ctx->fail = 0;
}
@

<<protos SKIP>>=
void rtrim(struct tkscan *ctx);
@

<<impl SKIP>>=
void rtrim(struct tkscan *ctx)
{
    char *b = ctx->beg + ctx->pos;
    char *e = ctx->end - 1;
    if (ctx->fail) return;
    while (e >= b && (*e == ' ' || *e == '\t')) {
        e--;
    }
    ctx->end = e + 1;
}
@

<<protos SKIP>>=
int
startswith2(struct tkscan *ctx, int x, int y);
@

<<impl SKIP>>=
int
startswith2(struct tkscan *ctx, int x, int y)
{
    char *b = ctx->beg + ctx->pos;
    size_t l = ctx->end - b;
    if (ctx->fail) return 0;
    if (l < 2) {
        return 0;
    }
    if (b[0] == x && b[1] == y) {
        ctx->pos += 2;
        return 1;
    }
    return 0;
}
@

<<protos SKIP>>=
int
endswith3(struct tkscan *ctx, int x, int y, int z);
@

<<impl SKIP>>=
int
endswith3(struct tkscan *ctx, int x, int y, int z)
{
    char *e = ctx->end;
    size_t l = e - (ctx->beg + ctx->pos);
    if (ctx->fail) return 0;
    if (l < 3) {
        return 0;
    }
    if (e[-3] == x && e[-2] == y && e[-1] == z) {
        ctx->end = e - 3;
        return 1;
    }
    return 0;
}
@

<<protos SKIP>>=
int
exact1(struct tkscan *ctx, int x);
@

<<impl SKIP>>=
int
exact1(struct tkscan *ctx, int x)
{
    char *b = ctx->beg + ctx->pos;
    size_t l = ctx->end - b;
    if (ctx->fail) return 0;
    if (l != 1) {
        return 0;
    }
    if (b[0] == x) {
        ctx->pos++;
        return 1;
    }
    return 0;
}
@

<<protos SKIP>>=
int
hasatleast(struct tkscan *ctx, size_t len);
@

<<impl SKIP>>=
int
hasatleast(struct tkscan *ctx, size_t len)
{
    if (ctx->fail) return 0;
    if ((ctx->end - (ctx->beg + ctx->pos)) >= (ssize_t)len) {
        return 1;
    }
    return 0;
}
@
