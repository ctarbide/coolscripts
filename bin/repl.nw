
A REPL example inspired by [WCNI], made to be paired with the wonderful [RLWRAP].

[WCNI]: https://www.cs.tufts.edu/~nr/noweb/examples/wcni.html

[RLWRAP]: https://github.com/hanslub42/rlwrap

'nofake repl.nw' for build instructions

<<Process Line: vars>>=
size_t line_length = ptr - line_start;
@

<<Process Line>>=
printf("**** line %s:%lu has %zu bytes: [", file_name, line_count, line_length);
fwrite(line_start, line_length, 1, stdout);
printf("]\n");
@

<<The main program>>=
int main(int argc, char **argv)
{
    <<Variables local to [[main]]>>
    <<Local variables initialization>>
    <<Set up option selection>>
    <<Process all the files>>
    <<Exit status>>
}
@

<<repl.c>>=
<<C Standards>>
<<Header files to include>>
<<Definitions>>
<<Global variables>>
<<The main program>>
@

<<C Standards>>=
#ifndef _BSD_SOURCE
#define _BSD_SOURCE
#endif

#ifndef _ISOC99_SOURCE
#define _ISOC99_SOURCE
#endif

#ifndef _XOPEN_SOURCE
#define _XOPEN_SOURCE 600
#endif

#ifndef _POSIX_C_SOURCE
#define _POSIX_C_SOURCE 200112L
#endif
@

<<Header files to include>>=
#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
#include <stdint.h>
#include <inttypes.h>
#include <string.h>
@

stdio.h BUFSIZ chosen for efficiency, BUF_SIZE also dictates the maximum line
length

<<Definitions>>=
#define OK                  0   /* status code for successful run */
#define cannot_open_file    1   /* status code for file access error */
#define line_too_long       2   /* line longer than BUF_SIZE - 1 */
#define READ_ONLY           0   /* read access code for system open */
#if BUFSIZ >= 512
#define BUF_SIZE            BUFSIZ
#else
#define BUF_SIZE            512
#endif
@

<<Global variables>>=
int status = OK;    /* exit status of command, initially OK */
char *prog_name;    /* who we are */
/* total number of lines */
long tot_line_count;
@

long line_count;    /* given totals */

<<Update grand totals>>=
tot_line_count += line_count;
@

<<Close file>>=
close(fd);
@

The line_start didn't advance, i.e, no '\n' was found.

<<Croak if a line feed is not found; [[continue]] on incomplete line>>=
if (line_start == buffer) {
    if (buf_end - buffer < BUF_SIZE) {
        /* got EOF on an incomplete line */
        *buf_end++ = '\n';
        continue;
    } else {
        fprintf(stderr,
            "%s: line %s:%lu is too long, greater than %zu\n",
            prog_name, file_name, line_count + 1,
            (size_t)(buf_end - buffer));
        status |= line_too_long;
        break;
    }
}
@

<<Fill [[buffer]] if it is empty; [[break]] at end of file>>=
if (ptr >= buf_end) {
    <<Croak if a line feed is not found; [[continue]] on incomplete line>>
    line_start = ptr = buffer;
    nc = read(fd, ptr, BUF_SIZE);
    if (nc <= 0) break;
    buf_end = buffer + nc;
}
@

<<Scan buffer>>=
while (1) {
    <<Fill [[buffer]] if it is empty; [[break]] at end of file>>
    c = *ptr++;
    if (c == '\n') {
        <<Process Line: vars>>
        line_count++;
        <<Process Line>>
        line_start = ptr;
    }
}
@

<<Scan file>>=
line_start = ptr = buffer;
nc = read(fd, ptr, BUF_SIZE);
if (nc > 0) {
    buf_end = buffer + nc;
    <<Scan buffer>>
}
@

<<Initialize pointers and counters>>=
line_start = ptr = buf_end = buffer;
line_count = 0;
@

<<If a file is given, try to open [[*(++argv)]]; [[continue]] if unsuccessful>>=
if (file_count > 0) {
    file_name = *(++argv);
    if (strcmp(file_name, "-") == 0) {
        fd = 0; /* stdin */
    } else if ((fd = open(file_name, READ_ONLY)) < 0) {
        fprintf(stderr,
            "%s: cannot open file %s\n",
            prog_name, file_name);
        status |= cannot_open_file;
        file_count--;
        continue;
    }
} else {
    fd = 0; /* stdin */
    file_name = "-";
}
@

<<Process all the files>>=
argc--;
do {
    <<If a file is given, try to open [[*(++argv)]]; [[continue]] if unsuccessful>>
    <<Initialize pointers and counters>>
    <<Scan file>>
    <<Close file>>
    <<Update grand totals>>
} while (--argc > 0);
@

<<Set up option selection>>=
file_count = argc - 1;
@

<<Variables local to [[main]]>>=
int file_count;         /* how many files there are */
char *file_name;        /* Used to differentiate between *argv and '-' */
int fd;                 /* file descriptor */
char buffer[BUF_SIZE];  /* we read the input into this array */
char *ptr;              /* first unprocessed character in buffer */
char *line_start;       /* where in the buffer the current line starts */
char *buf_end;          /* the first unused position in buffer */
int c;                  /* current char */
ssize_t nc;             /* # of chars just read */
long line_count;        /* # of words, lines, and chars so far */
@

<<Local variables initialization>>=
prog_name = argv[0];
@

<<Exit status>>=
exit(status);
return 0;
@

nofake repl.nw | sh -x

<<*>>=
#!/bin/sh
set -eu
<<build repl.c>>
gcc -O2 -Wall -std=c99 -o repl repl.c
@

<<repl.c deps>>=
repl.nw
@

<<build repl.c>>=
CHMOD='chmod 0444' nofake.sh --error -L -Rrepl.c -orepl.c <<repl.c deps>>
@

[[targets]] are used by automatic Makefile generation, see [[Makefile.nw]] for
details, along with [[target deps]] and [[build target]] above.

<<targets>>=
set -- "$@" repl.c
@
