
Reference: https://www.cs.tufts.edu/~nr/noweb/examples/wcni.html

nofake bits-to-bytes-in-c.nw

<<The main program>>=
int main(int argc, char **argv)
{
	<<Variables local to [[main]]>>
	<<Local variables initialization>>
	<<Set up option selection>>
	<<Process all the files>>
	<<Exit status>>
}
@

<<bits-to-bytes.c>>=
<<C Standards>>
<<Header files to include>>
<<Definitions>>
<<Global variables>>
<<The main program>>
@

<<C Standards>>=
#ifndef _BSD_SOURCE
#define _BSD_SOURCE
#endif

#ifndef _ISOC99_SOURCE
#define _ISOC99_SOURCE
#endif

#ifndef _XOPEN_SOURCE
#define _XOPEN_SOURCE		600
#endif

#ifndef _POSIX_C_SOURCE
#define _POSIX_C_SOURCE		200112L
#endif
@

<<Header files to include>>=
#include <stdlib.h>
#include <stdio.h>
#include <fcntl.h>
#include <unistd.h>
@

<<Definitions>>=
#define OK			0	/* status code for successful run */
#define usage_error		1	/* status code for improper syntax */
#define cannot_open_file	2	/* status code for file access error */
#define READ_ONLY		0	/* read access code for system open */
#define buf_size	BUFSIZ		/* stdio.h BUFSIZ chosen for efficiency */
#define print_count(i,n) printf("%s%ld", i ? " " : "", n)
@

<<Global variables>>=
int status = OK;	/* exit status of command, initially OK */
char *prog_name;	/* who we are */
/* total number of words, lines, chars */
long tot_word_count, tot_line_count, tot_char_count;
@

char *which;  					/* which counts to print */
long char_count, word_count, line_count;	/* given totals */

<<Close file>>=
close(fd);
@

Assume every bit will occupy 2 bytes, a '0' or '1' and a new line.

<<Fill [[buffer]] if it is under 16 bytes; [[break]] at end of file>>=
if (ptr + 16 > buf_end) {
	ptr = buffer;
	nc = read(fd, ptr, buf_size);
	if (nc <= 0) break;
	buf_end = buffer + nc;
}
@

<<Scan file>>=
while (1) {
	<<Fill [[buffer]] if it is under 16 bytes; [[break]] at end of file>>
	out =	((ptr[0*2] & 1) << 7) |
		((ptr[1*2] & 1) << 6) |
		((ptr[2*2] & 1) << 5) |
		((ptr[3*2] & 1) << 4) |
		((ptr[4*2] & 1) << 3) |
		((ptr[5*2] & 1) << 2) |
		((ptr[6*2] & 1) << 1) |
		((ptr[7*2] & 1) << 0);
	ptr += 16;
	putc(out, stdout);
}
@

<<Initialize pointers and counters>>=
ptr = buf_end = buffer;
@

<<If a file is given, try to open [[*(++argv)]]; [[continue]] if unsuccessful>>=
if (file_count > 0
    && (fd = open(*(++argv), READ_ONLY)) < 0) {
	fprintf(stderr,
		"%s: cannot open file %s\n",
		prog_name, *argv);
	status |= cannot_open_file;
	file_count--;
	continue;
}
@

<<Process all the files>>=
argc--;
do {
	<<If a file is given, try to open [[*(++argv)]]; [[continue]] if unsuccessful>>
	<<Initialize pointers and counters>>
	<<Scan file>>
	<<Close file>>
	/* even if there is only one file */
} while (--argc > 0);
@

<<Set up option selection>>=
file_count = argc - 1;
@

<<Variables local to [[main]]>>=
int file_count;		/* how many files there are */
int fd = 0;		/* file descriptor, initialized to stdin */
char buffer[buf_size];	/* we read the input into this array */
char *ptr;		/* first unprocessed character in buffer */
char *buf_end;		/* the first unused position in buffer */
int out;		/* output char */
ssize_t nc;		/* # of chars just read */
@

<<Local variables initialization>>=
prog_name = argv[0];
@

<<Exit status>>=
exit(status);
return 0;
@

<<*>>=
#!/bin/sh
set -eu
nofake.sh -L -Rbits-to-bytes.c -obits-to-bytes.c bits-to-bytes-in-c.nw
gcc -O2 -Wall -std=c99 -o bits-to-bytes bits-to-bytes.c
@
